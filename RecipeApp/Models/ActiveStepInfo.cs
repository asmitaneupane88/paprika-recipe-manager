using Microsoft.UI.Text;
using RecipeApp.Models.RecipeSteps;

namespace RecipeApp.Models;

/// <summary>
/// Used for the step viewer to keep track of necessary info for navigating through steps
/// </summary>
public partial class ActiveStepInfo : IAutosavingClass<ActiveStepInfo>
{
    [ObservableProperty] public partial string RecipeTitle { get; set; }
    [ObservableProperty] public partial string RecipeImageUrl { get; set; }
    /// <summary>
    /// not a reference to the original recipe, just an indicator to group up steps that started with the same root step.
    /// </summary>
    [ObservableProperty] public partial Guid RecipeId { get; set; }
    
    /// <summary>
    /// time left on the timer, in minutes.
    /// </summary>
    [ObservableProperty] public partial double TimeLeft { get; set; }
        
    /// <summary>
    /// the current step to display, this updates the bindable content automatically
    /// </summary>
    public IStep CurrentStep { get; set { SetProperty( ref field, value); ResetBindableContent(); }}
    
    /// <summary>
    /// a list of ISteps and the ingredients used for that step
    /// </summary>
    [ObservableProperty] public partial List<StepIngredientUsage> IngredientsUsed { get; set; }

    /// <summary>
    /// content to display on the step viewer
    /// </summary>
    [JsonIgnore] public object BindableContent => GetBindableContent();
    
    /// <summary>
    /// true for every step except the merge step
    /// </summary>
    [JsonIgnore] public Visibility NextButtonsVisible => CurrentStep is MergeStep ? Visibility.Collapsed : Visibility.Visible;

    private object GetBindableContent()
    {
        return CurrentStep switch
        {
            StartStep startStep => GetStartDescription(startStep),
            MergeStep mergeStep => "Waiting for other steps to be completed...",
            TextStep textStep => textStep.BindableDescription??"",
            TimerStep timerStep => GetTimerContent(timerStep),
            _ => "",
        };
    }
    
    private string GetStartDescription(StartStep startStep)
    {
        var paths = startStep.GetNestedPathInfo();

        var sb = new StringBuilder();

        foreach (var path in paths)
        {
            sb.AppendLine(path.OutNode.Title);
            sb.AppendLine($"    Cook time: {path.MinTotalTime}-{path.MaxTotalTime} minutes");
            sb.AppendLine($"    Ingredients: ");
            foreach (var ingredient in path.MinIngredients.OrderBy(i => i.Name))
            {
                var maxString = (path.MaxIngredients
                    .FirstOrDefault(i => (i.Name?.Equals(ingredient.Name, StringComparison.CurrentCultureIgnoreCase)??false))
                    is { } maxIngredient && (maxIngredient.Quantity - 0.001) > ingredient.Quantity)
                    ? $"-{maxIngredient.Quantity}" 
                    : "";
                    
                sb.AppendLine($"        {ingredient.Name} ({ingredient.Quantity}{maxString} {ingredient.Unit})");
            }
            sb.AppendLine();
        }

        return sb.ToString();
    }

    //TODO: refine this UI later
    
    // this timer is mostly generated by Claude Sonnet 4.5
    private StackPanel GetTimerContent(TimerStep timerStep)
    {
        var stackPanel = new StackPanel
        {
            Spacing = 16,
            HorizontalAlignment = HorizontalAlignment.Center
        };
        
        var timerText = new TextBlock
        {
            Text = FormatTime(TimeLeft),
            FontSize = 48,
            HorizontalAlignment = HorizontalAlignment.Center,
            FontWeight = FontWeights.Bold
        };
        
        var progressBar = new ProgressBar
        {
            Width = 300,
            Height = 20,
            Maximum = timerStep.MinutesToComplete,
            Value = TimeLeft,
            ShowError = false,
            ShowPaused = false
        };
        
        var buttonPanel = new StackPanel
        {
            Orientation = Orientation.Horizontal,
            Spacing = 8,
            HorizontalAlignment = HorizontalAlignment.Center
        };
        
        var startButton = new Button { Content = "Start" };
        var pauseButton = new Button { Content = "Pause" };
        var resetButton = new Button { Content = "Reset" };
        
        buttonPanel.Children.Add(startButton);
        buttonPanel.Children.Add(pauseButton);
        buttonPanel.Children.Add(resetButton);
        
        stackPanel.Children.Add(timerText);
        stackPanel.Children.Add(progressBar);
        stackPanel.Children.Add(buttonPanel);
        
        var timer = new DispatcherTimer { Interval = TimeSpan.FromSeconds(1) };
        timer.Tick += (s, e) =>
        {
            TimeLeft -= 1.0 / 60.0;
            
            if (TimeLeft <= 0)
            {
                TimeLeft = 0;
                timer.Stop();
                timerText.Text = FormatTime(0);
                progressBar.Value = 0;
            }
            else
            {
                timerText.Text = FormatTime(TimeLeft);
                progressBar.Value = TimeLeft;
            }
        };
        
        startButton.Click += (s, e) => 
        {
            if (TimeLeft > 0)
            {
                timer.Start();
            }
        };
        
        pauseButton.Click += (s, e) => timer.Stop();
        
        resetButton.Click += (s, e) =>
        {
            timer.Stop();
            TimeLeft = timerStep.MinutesToComplete;
            timerText.Text = FormatTime(TimeLeft);
            progressBar.Value = TimeLeft;
        };
        
        return stackPanel;
    }

    private string FormatTime(double minutes)
    {
        var totalSeconds = (int)(minutes * 60);
        var timeSpan = TimeSpan.FromSeconds(totalSeconds);
        return timeSpan.ToString(@"mm\:ss");
    }
    
    /// <summary>
    /// triggers an update for the bindable content and visibility of the next buttons.
    /// </summary>
    public void ResetBindableContent()
    {
        OnPropertyChanged(nameof(BindableContent));
        OnPropertyChanged(nameof(NextButtonsVisible));
    }
    
    public void AddIngredientsForStep(IStep step, List<RecipeIngredient> ingredients)
    {
        var existing = IngredientsUsed.FirstOrDefault(x => ReferenceEquals(x.Step, step));
        
        if (existing != null)
        {
            existing.Ingredients = ingredients;
        }
        else
        {
            IngredientsUsed.Add(new StepIngredientUsage
            {
                Step = step,
                Ingredients = ingredients
            });
        }
    }
}

/// <summary>
/// Basically a tuple of the IStep and the ingredients used in that step.
/// A dictionary does not work with ISteps.
/// </summary>
public class StepIngredientUsage
{
    public IStep Step { get; set; } = null!;
    public List<RecipeIngredient> Ingredients { get; set; } = [];
}
